{
  "$schema" : "https://json-schema.axonivy.com/process/12.0.0/process.json",
  "id" : "187997E4FAE2FBE9",
  "kind" : "CALLABLE_SUB",
  "config" : {
    "data" : "com.openai.connector.openaiData"
  },
  "elements" : [ {
      "id" : "f0",
      "type" : "CallSubStart",
      "name" : "chatGpt(String,ModelEnum,BigDecimal)",
      "config" : {
        "signature" : "chatGpt",
        "input" : {
          "params" : [
            { "name" : "what", "type" : "String", "desc" : "" },
            { "name" : "model", "type" : "com.openai.api.v1.client.CreateChatCompletionRequest.ModelEnum", "desc" : "" },
            { "name" : "temperature", "type" : "BigDecimal", "desc" : "" }
          ],
          "map" : {
            "out.model" : "param.model",
            "out.temperature" : "param.temperature"
          },
          "code" : [
            "import com.openai.api.v1.client.ChatCompletionRequestUserMessage;",
            "import com.openai.api.v1.client.ChatCompletionRequestMessageContentPartText;",
            "out.logitBias = new java.util.HashMap();",
            "out.logitBias.put(\"50256\", -100);",
            "",
            "ChatCompletionRequestUserMessage message = new ChatCompletionRequestUserMessage();",
            "ChatCompletionRequestMessageContentPartText content = new ChatCompletionRequestMessageContentPartText();",
            "content.setText(param.what);",
            "content.setType(\"text\");",
            "message.addContentItem(content);",
            "message.name = ivy.session.getSessionUserName();",
            "message.role = \"user\";",
            "out.message = message;"
          ]
        },
        "result" : {
          "params" : [
            { "name" : "answer", "type" : "String", "desc" : "" }
          ],
          "map" : {
            "result.answer" : "in.answer"
          }
        }
      },
      "tags" : [
        "connector"
      ],
      "visual" : {
        "at" : { "x" : 656, "y" : 64 },
        "icon" : "res:/webContent/logo/OpenAI_Logo.png?small"
      },
      "connect" : [
        { "id" : "f4", "to" : "f3" }
      ]
    }, {
      "id" : "f1",
      "type" : "CallSubEnd",
      "visual" : {
        "at" : { "x" : 976, "y" : 64 }
      }
    }, {
      "id" : "f3",
      "type" : "RestClientCall",
      "name" : "openai (OpenAI API)",
      "config" : {
        "method" : "POST",
        "target" : {
          "clientId" : "6840e778-eb27-42a0-afdc-87588ffae871",
          "path" : "/chat/completions"
        },
        "body" : {
          "entity" : {
            "type" : "com.openai.api.v1.client.CreateChatCompletionRequest",
            "map" : {
              "param.audio.format" : "com.openai.api.v1.client.CreateChatCompletionRequestAudio.FormatEnum.MP3",
              "param.audio.voice" : "com.openai.api.v1.client.CreateChatCompletionRequestAudio.VoiceEnum.ECHO",
              "param.logitBias" : "in.logitBias",
              "param.messages" : "[in.message]",
              "param.model" : "in.#model  is initialized ? in.#model : com.openai.api.v1.client.CreateChatCompletionRequest.ModelEnum.GPT_3_5_TURBO",
              "param.temperature" : "in.#temperature  is initialized ? in.#temperature : 0",
              "param.user" : "ivy.session.getSessionUserName()"
            }
          }
        },
        "response" : {
          "entity" : {
            "type" : "com.openai.api.v1.client.CreateChatCompletionResponse",
            "map" : {
              "out.answer" : "result.choices.get(0).message.content"
            }
          }
        }
      },
      "visual" : {
        "at" : { "x" : 848, "y" : 64 },
        "icon" : "res:/webContent/logo/OpenAI_Logo.png"
      },
      "connect" : [
        { "id" : "f2", "to" : "f1" }
      ]
    }, {
      "id" : "f5",
      "type" : "CallSubStart",
      "name" : "getAssistants()",
      "config" : {
        "signature" : "getAssistants",
        "result" : {
          "params" : [
            { "name" : "assistants", "type" : "List<com.openai.api.v1.client.AssistantObject>", "desc" : "" }
          ],
          "map" : {
            "result.assistants" : "in.assistants"
          }
        }
      },
      "visual" : {
        "at" : { "x" : 720, "y" : 192 },
        "icon" : "res:/webContent/logo/OpenAI_Logo.png?small"
      },
      "connect" : [
        { "id" : "f7", "to" : "f8" }
      ]
    }, {
      "id" : "f6",
      "type" : "CallSubEnd",
      "visual" : {
        "at" : { "x" : 976, "y" : 192 },
        "labelOffset" : { "x" : 13, "y" : 33 }
      }
    }, {
      "id" : "f8",
      "type" : "RestClientCall",
      "name" : "Get Assistants",
      "config" : {
        "target" : {
          "clientId" : "6840e778-eb27-42a0-afdc-87588ffae871",
          "path" : "/assistants",
          "headers" : {
            "OpenAI-Beta" : "\"assistants=v2\""
          }
        },
        "response" : {
          "entity" : {
            "type" : "com.openai.api.v1.client.ListAssistantsResponse",
            "map" : {
              "out.assistants" : "result.data"
            }
          }
        }
      },
      "visual" : {
        "at" : { "x" : 848, "y" : 192 }
      },
      "connect" : [
        { "id" : "f9", "to" : "f6", "color" : "default" }
      ]
    }, {
      "id" : "f10",
      "type" : "ProcessAnnotation",
      "name" : "The client request sets up all required and optional variables to send a request and receive content generated by the AI model.",
      "visual" : {
        "at" : { "x" : 1199, "y" : 63 },
        "size" : { "width" : 331, "height" : 59 }
      }
    }, {
      "id" : "f12",
      "type" : "ProcessAnnotation",
      "name" : "This callable accepts parameters from external sources, such as message, model, temperature, and more",
      "visual" : {
        "at" : { "x" : 296, "y" : 87 },
        "size" : { "width" : 464, "height" : 62 }
      }
    }, {
      "id" : "f13",
      "type" : "ProcessAnnotation",
      "name" : "This callable is configured to return client.AssistantObject by invoking the Get Assistants REST client. It connects to the OpenAI API endpoint GET /v1/assistants, retrieving a list of configurable AI agents—Assistants—each with its own behavior, personality, and optional tools like code execution, retrieval (RAG), or function calling.",
      "visual" : {
        "at" : { "x" : 348, "y" : 196 },
        "size" : { "width" : 600, "height" : 72 }
      }
    } ]
}